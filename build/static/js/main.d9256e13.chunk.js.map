{"version":3,"sources":["components/ImgCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","id","Wrapper","children","Navbar","score","highScore","Jumbotron","App","state","pets","clicked","shuffleArray","i","length","j","Math","floor","random","temp","imgClicked","petId","_this","setState","slice","indexOf","concat","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","pet","index","components_ImgCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"++DAceA,MAXf,SAAiBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMS,QAAQT,EAAMU,iBCDtEC,MAJf,SAAiBX,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,iBCQ1BC,MATf,SAAgBb,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4CAAhB,UAAmEJ,EAAMc,MAAzE,iBAA8Fd,EAAMe,mBCQ/FC,MAXf,WACI,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,gGC2DDc,oNAzDbC,MAAQ,CACNC,OACAC,QAAS,GACTN,MAAO,EACPC,UAAW,KAGbM,aAAe,SAACF,GAEd,IADA,IAAIG,EAAIH,EAAKI,OAAS,EACfD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOT,EAAKG,GAClBH,EAAKG,GAAKH,EAAKK,GACfL,EAAKK,GAAKI,EAEZ,OAAOT,KAGTU,WAAa,SAACC,GACZC,EAAKC,SAAS,CAAEb,KAAMY,EAAKV,aAAaU,EAAKb,MAAMC,KAAKc,MAAM,OACnB,IAAvCF,EAAKb,MAAME,QAAQc,QAAQJ,IAC7BC,EAAKC,SAAS,CAAElB,MAAOiB,EAAKb,MAAMJ,MAAQ,IAC1CiB,EAAKC,SAAS,CAAEZ,QAASW,EAAKb,MAAME,QAAQe,OAAO,CAACL,QAEpDC,EAAKC,SAAS,CAAEZ,QAAS,KACrBW,EAAKb,MAAMJ,MAAQiB,EAAKb,MAAMH,WAChCgB,EAAKC,SAAS,CAAEjB,UAAWgB,EAAKb,MAAMJ,QAExCiB,EAAKC,SAAS,CAAElB,MAAO,8EAKjB,IAAAsB,EAAAC,KACR,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,CACExB,MAAOuB,KAAKnB,MAAMJ,MAClBC,UAAWsB,KAAKnB,MAAMH,YAExBd,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,KACGH,KAAKnB,MAAMC,KAAKsB,IAAI,SAACC,EAAKC,GAAN,OACnB1C,EAAAC,EAAAC,cAACyC,EAAD,CACEC,IAAKF,EACLjC,GAAIgC,EAAIhC,GACRJ,KAAMoC,EAAIpC,KACVE,MAAOkC,EAAIlC,MACXC,QAAS2B,EAAKP,wBAjDViB,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d9256e13.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImgCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <div className=\"img-container img-thumbnail\">\n          <img alt={props.name} src={props.image} onClick={() => props.onClick(props.id)} />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default ImgCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n          <span className=\"navbartext offset-9 navbar-brand mb-0 h1\">Score: {props.score} | Highscore: {props.highScore}</span>\n          {/* <span class=\"navbar-brand mb-0 h1\">Highscore: {props.highScore}</span> */}\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron\">\n            <div className=\"container\">\n                <h2>Clicky game</h2>\n                <h4>Click on an image to earn points, but don't click on any more than once!</h4>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport ImgCard from \"./components/ImgCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport pets from \"./pets.json\";\nimport \"./App.css\";\n// import { finished } from \"stream\";\n\nclass App extends React.Component {\n  state = {\n    pets,\n    clicked: [],\n    score: 0,\n    highScore: 0,\n  }\n\n  shuffleArray = (pets) => {\n    let i = pets.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = pets[i];\n      pets[i] = pets[j];\n      pets[j] = temp;\n    }\n    return pets;\n  }\n\n  imgClicked = (petId) => {\n    this.setState({ pets: this.shuffleArray(this.state.pets.slice(0)) });\n    if (this.state.clicked.indexOf(petId) === -1) {\n      this.setState({ score: this.state.score + 1 });\n      this.setState({ clicked: this.state.clicked.concat([petId])});\n    } else {\n      this.setState({ clicked: [] });\n      if (this.state.score > this.state.highScore) {\n        this.setState({ highScore: this.state.score });\n      }\n      this.setState({ score: 0 });\n    }\n  }\n\n\n  render () {\n    return (\n      <div>\n        <Navbar \n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.pets.map((pet, index) => (\n            <ImgCard\n              key={index}\n              id={pet.id}\n              name={pet.name}\n              image={pet.image}\n              onClick={this.imgClicked}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}